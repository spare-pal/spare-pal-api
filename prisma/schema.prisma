generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ShopStatus {
  ACTIVE
  INACTIVE
}

model User {
  id           Int        @id @default(autoincrement())
  first_name   String
  last_name    String?
  username     String     @unique
  email        String?
  phone_number String     @unique
  password     String
  status       UserStatus @default(ACTIVE)
  last_login   DateTime?
  user_type    Role       @default(CUSTOMER)
  avatar       String?

  OrderItems OrderItem[]
  Orders     Order[]
  Favorites  Favorite[]
  Shops      Shop[]

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("users")
}

model Shop {
  id           Int        @id @default(autoincrement())
  name         String
  description  String?
  address      String?
  latitude     Float?
  longitude    Float?
  user_id      Int?
  status       ShopStatus @default(ACTIVE)
  splash_image String?

  User       User?      @relation(fields: [user_id], references: [id])
  Products   Product[]
  Categories Category[] @relation("CategoryToShop")
  Banners    Banner[]

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("shops")
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Float
  status      ProductStatus @default(ACTIVE)
  shop_id     Int

  Images     Image[]
  OrderItems OrderItem[]
  Shop       Shop        @relation(fields: [shop_id], references: [id])
  Categories Category[]  @relation("CategoryToProduct")
  Favorites  Favorite[]

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("products")
}

model OrderItem {
  id         Int   @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int
  unit_price Float
  total      Float
  order_id   Int

  User    User    @relation(fields: [user_id], references: [id])
  Order   Order   @relation(fields: [order_id], references: [id])
  Product Product @relation(fields: [product_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("order_items")
}

model Order {
  id             Int           @id @default(autoincrement())
  user_id        Int
  total_price    Float
  address        String
  order_status   OrderStatus   @default(PENDING)
  payment_method String        @default("cash")
  payment_status PaymentStatus @default(PENDING)
  note           String?

  placed    DateTime
  completed DateTime?
  cancelled DateTime?
  delivered DateTime?

  User       User        @relation(fields: [user_id], references: [id])
  OrderItems OrderItem[]

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("orders")
}

model Category {
  id                 Int     @id @default(autoincrement())
  name               String
  description        String?
  parent_category_id Int?

  Products Product[]  @relation("CategoryToProduct")
  Shops    Shop[]     @relation("CategoryToShop")
  Parent   Category?  @relation("CategoryToCategory", fields: [parent_category_id], references: [id])
  Children Category[] @relation("CategoryToCategory")

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("categories")
}

model Favorite {
  id         Int @id @default(autoincrement())
  user_id    Int
  product_id Int

  User    User    @relation(fields: [user_id], references: [id])
  Product Product @relation(fields: [product_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("favorites")
}

model Banner {
  id          Int     @id @default(autoincrement())
  image       String
  title       String
  description String?
  status      Boolean @default(true)
  shop_id     Int

  Shop Shop @relation(fields: [shop_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("banners")
}

model Image {
  id         Int    @id @default(autoincrement())
  url        String
  alt        String
  product_id Int

  Product Product @relation(fields: [product_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("images")
}
